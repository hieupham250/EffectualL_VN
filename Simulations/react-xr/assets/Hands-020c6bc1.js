import{r as c,j as u,F as m,a as r}from"./index-871a1683.js";import{$ as x,x as g,B as v,n as C,m as b,a0 as M,l as P,V as j,C as y,X as E}from"./XR-3a18f114.js";import{G as _}from"./GLTFLoader-6513b2d7.js";const I="https://cdn.jsdelivr.net/npm/@webxr-input-profiles/assets@1.0/dist/profiles/generic-hand/";class O{constructor(e,i,n=I,t,s){this.controller=i,this.handModel=e,this.bones=[];const a=new _;s||a.setPath(n),a.load(s??`${t}.glb`,f=>{const l=f.scene.children[0];this.handModel.add(l),this.scene=l;const h=l.getObjectByProperty("type","SkinnedMesh");h.frustumCulled=!1,h.castShadow=!0,h.receiveShadow=!0,["wrist","thumb-metacarpal","thumb-phalanx-proximal","thumb-phalanx-distal","thumb-tip","index-finger-metacarpal","index-finger-phalanx-proximal","index-finger-phalanx-intermediate","index-finger-phalanx-distal","index-finger-tip","middle-finger-metacarpal","middle-finger-phalanx-proximal","middle-finger-phalanx-intermediate","middle-finger-phalanx-distal","middle-finger-tip","ring-finger-metacarpal","ring-finger-phalanx-proximal","ring-finger-phalanx-intermediate","ring-finger-phalanx-distal","ring-finger-tip","pinky-finger-metacarpal","pinky-finger-phalanx-proximal","pinky-finger-phalanx-intermediate","pinky-finger-phalanx-distal","pinky-finger-tip"].forEach(d=>{const p=l.getObjectByName(d);p!==void 0?p.jointName=d:console.warn(`Couldn't find ${d} in ${t} hand mesh`),this.bones.push(p)})})}updateMesh(){const e=this.controller.joints;let i=!0;for(let n=0;n<this.bones.length;n++){const t=this.bones[n];if(t){const s=e[t.jointName];if(s.visible){const a=s.position;t.position.copy(a),t.quaternion.copy(s.quaternion),i=!1}}}i&&this.scene?this.scene.visible=!1:this.scene&&(this.scene.visible=!0)}dispose(){this.scene&&this.handModel.remove(this.scene)}}const S=.01,w="index-finger-tip";class L extends x{constructor(e,i,n){super(),this._onConnected=t=>{const s=t.data;s.hand&&!this.motionController&&(this.xrInputSource=s,this.motionController=new O(this,this.controller,void 0,s.handedness,s.handedness==="left"?this.leftModelPath:this.rightModelPath))},this._onDisconnected=()=>{var t;(t=this.xrInputSource)!=null&&t.hand&&this.motionControllerCleanup()},this.controller=e,this.motionController=null,this.envMap=null,this.leftModelPath=i,this.rightModelPath=n,this.mesh=null,this.xrInputSource=null,e.addEventListener("connected",this._onConnected),e.addEventListener("disconnected",this._onDisconnected)}motionControllerCleanup(){var e;this.clear(),(e=this.motionController)==null||e.dispose(),this.motionController=null}updateMatrixWorld(e){super.updateMatrixWorld(e),this.motionController&&this.motionController.updateMesh()}getPointerPosition(){const e=this.controller.joints[w];return e?e.position:null}intersectBoxObject(e){const i=this.getPointerPosition();if(i){const n=new g(i,S),t=new v().setFromObject(e);return n.intersectsBox(t)}else return!1}checkButton(e){this.intersectBoxObject(e)?e.onPress():e.onClear(),e.isPressed()&&e.whilePressed()}dispose(){this.motionControllerCleanup(),this.controller.removeEventListener("connected",this._onConnected),this.controller.removeEventListener("disconnected",this._onDisconnected)}}function B({modelLeft:o,modelRight:e}){const i=C(n=>n.controllers);return c.useMemo(()=>b({OculusHandModel:L}),[]),M(()=>{for(const n of i)n.hand.dispatchEvent({type:"connected",data:n.inputSource,fake:!0})},[i,o,e]),c.createElement(c.Fragment,null,i.map(({hand:n})=>P(c.createElement("oculusHandModel",{args:[n,o,e]}),n)))}function R(){return u(m,{children:[r(j,{onError:o=>console.error(o)}),r(y,{children:u(E,{children:[r("ambientLight",{intensity:.5}),r("pointLight",{position:[5,5,5]}),r(B,{})]})})]})}export{R as default};
